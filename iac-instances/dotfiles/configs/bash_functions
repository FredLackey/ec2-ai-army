#!/bin/bash

# Create directory and cd into it
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Extract various archive formats
extract() {
    if [ -f "$1" ]; then
        case "$1" in
            *.tar.bz2)   tar xjf "$1"     ;;
            *.tar.gz)    tar xzf "$1"     ;;
            *.bz2)       bunzip2 "$1"     ;;
            *.rar)       unrar e "$1"     ;;
            *.gz)        gunzip "$1"      ;;
            *.tar)       tar xf "$1"      ;;
            *.tbz2)      tar xjf "$1"     ;;
            *.tgz)       tar xzf "$1"     ;;
            *.zip)       unzip "$1"       ;;
            *.Z)         uncompress "$1"  ;;
            *.7z)        7z x "$1"        ;;
            *)           echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Find file by name
ff() {
    find . -type f -name "*$1*"
}

# Find directory by name
fd() {
    find . -type d -name "*$1*"
}

# Search history
h() {
    grep --color=always "$*" "$HISTFILE" | less -R
}

# Get public IP
myip() {
    curl -s https://ipinfo.io/ip
    echo
}

# Show system information
sysinfo() {
    echo "=== System Information ==="
    echo "Hostname: $(hostname)"
    echo "OS: $(lsb_release -ds 2>/dev/null || cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2)"
    echo "Kernel: $(uname -r)"
    echo "Uptime: $(uptime -p)"
    echo "Memory: $(free -h | awk '/^Mem:/ {print $3 "/" $2}')"
    echo "Disk: $(df -h / | awk 'NR==2 {print $3 "/" $2 " (" $5 ")"}')"
    echo "Load: $(uptime | awk -F'load average:' '{print $2}')"
    echo "Public IP: $(curl -s https://ipinfo.io/ip)"
    echo "Local IP: $(hostname -I | awk '{print $1}')"
}

# Backup file with timestamp
backup() {
    if [ -f "$1" ]; then
        cp "$1" "$1.backup.$(date +%Y%m%d_%H%M%S)"
        echo "Backup created: $1.backup.$(date +%Y%m%d_%H%M%S)"
    else
        echo "File not found: $1"
    fi
}

# Show disk usage for current directory
duh() {
    du -sh * 2>/dev/null | sort -rh
}

# Git push with message
gpush() {
    if [ -z "$1" ]; then
        echo "Usage: gpush \"commit message\""
        return 1
    fi
    git add -A && git commit -m "$1" && git push
}

# Check if port is in use
port() {
    if [ -z "$1" ]; then
        echo "Usage: port <port_number>"
        return 1
    fi
    sudo lsof -i :$1
}

# Kill process on port
killport() {
    if [ -z "$1" ]; then
        echo "Usage: killport <port_number>"
        return 1
    fi
    sudo kill -9 $(sudo lsof -t -i:$1) 2>/dev/null
    if [ $? -eq 0 ]; then
        echo "Killed process on port $1"
    else
        echo "No process found on port $1"
    fi
}

# Docker cleanup
docker-clean() {
    if command -v docker &> /dev/null; then
        echo "Cleaning Docker..."
        docker system prune -af --volumes
        echo "Docker cleanup complete"
    else
        echo "Docker is not installed"
    fi
}

# Show top memory consuming processes
topmem() {
    ps aux | sort -rk 4 | head -${1:-10}
}

# Show top CPU consuming processes
topcpu() {
    ps aux | sort -rk 3 | head -${1:-10}
}

# Create a Python virtual environment
mkvenv() {
    python3 -m venv "${1:-venv}"
    source "${1:-venv}/bin/activate"
}

# Weather report
weather() {
    curl -s "wttr.in/${1:-}"
}

# Quick note taking
note() {
    if [ -z "$1" ]; then
        cat ~/notes.txt 2>/dev/null || echo "No notes found"
    else
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" >> ~/notes.txt
        echo "Note saved"
    fi
}

# Search for text in files
search() {
    if [ -z "$1" ]; then
        echo "Usage: search <pattern> [path]"
        return 1
    fi
    grep -r --color=always "$1" "${2:-.}" 2>/dev/null | less -R
}

# SSH key generator
sshkeygen() {
    local email="${1:-$USER@$(hostname)}"
    local keyname="${2:-id_ed25519}"
    ssh-keygen -t ed25519 -C "$email" -f "$HOME/.ssh/$keyname"
    echo "SSH key generated: $HOME/.ssh/$keyname"
}

# Show certificate information
certinfo() {
    if [ -z "$1" ]; then
        echo "Usage: certinfo <domain>"
        return 1
    fi
    echo | openssl s_client -showcerts -servername "$1" -connect "$1:443" 2>/dev/null | openssl x509 -inform pem -noout -text
}

# Test network connectivity
nettest() {
    echo "Testing network connectivity..."
    ping -c 1 8.8.8.8 &>/dev/null && echo "✓ Internet connection" || echo "✗ No internet connection"
    ping -c 1 google.com &>/dev/null && echo "✓ DNS resolution" || echo "✗ DNS not working"
    curl -s --head https://www.google.com &>/dev/null && echo "✓ HTTPS working" || echo "✗ HTTPS not working"
}